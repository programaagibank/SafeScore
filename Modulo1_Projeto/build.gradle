plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'br.com.safescore'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '21'
targetCompatibility = '21'

application {
    mainClass = 'br.com.safescore.MainApp'
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

dependencies {
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.mindrot:jbcrypt:0.4'

    // JavaFX e outras libs
    implementation 'org.controlsfx:controlsfx:11.2.1'
    implementation 'com.dlsc.formsfx:formsfx-core:11.6.0'
    implementation 'net.synedra:validatorfx:0.5.0'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    implementation 'eu.hansolo:tilesfx:21.0.3'
    implementation 'com.itextpdf:itext7-core:7.2.5'
    implementation 'com.itextpdf:html2pdf:5.0.2'

    // Adicionando Datafaker
    implementation 'net.datafaker:datafaker:2.4.2'

    // Adicionando Weka
    implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'

    // Testes
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'nz.ac.waikato.cms.weka:weka-stable:3.8.6'
    implementation 'com.google.code.gson:gson:2.10.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs = []
}

tasks.withType(JavaExec) {
    // Separar o module-path apenas para o JavaFX
    def javafxModules = configurations.runtimeClasspath.filter { it.name.contains('javafx') }
    jvmArgs = [
            '--module-path', javafxModules.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.web'
    ]
    // Usar classpath para o restante (Weka, Datafaker, etc.)
    classpath = sourceSets.main.runtimeClasspath - javafxModules
}

test {
    useJUnitPlatform()
}